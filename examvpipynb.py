# -*- coding: utf-8 -*-
"""examvpipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OeAN0jE-DQdhTistAQ43x-jqPhm2yHPL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

train_df = pd.read_csv('/content/train_LZdllcl.csv')
test_df = pd.read_csv('/content/test_2umaH9m.csv')

print(train_df.head())

print(train_df.info())

print(train_df.describe())

print(train_df.shape)

print("Null values",train_df.isna().sum())
print("Duplicate values",train_df.duplicated().sum())

# Replacing null values in 'education' with the mode
train_df['education'] = train_df['education'].fillna(train_df['education'].mode()[0])

# Replacing null values in 'previous_year_rating' with the mode
train_df['previous_year_rating'] = train_df['previous_year_rating'].fillna(train_df['previous_year_rating'].mode()[0])

print("Null values",train_df.isna().sum())

train_df.columns

for col in train_df.columns:
  print(f"Column '{col}' has {train_df[col].nunique()} unique values.")

num_col = ['no_of_trainings', 'age',
       'length_of_service',
       'avg_training_score']

cat_col = ['department', 'region', 'previous_year_rating','education', 'gender', 'recruitment_channel']

print(num_col)
print(cat_col)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
train_df[num_col] = scaler.fit_transform(train_df[num_col])

train_df = pd.get_dummies(train_df, columns=cat_col, drop_first=True)
print(train_df.head())

from sklearn.model_selection import train_test_split
x = train_df.drop("is_promoted",axis = 1)
y = train_df["is_promoted"]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=40)

from sklearn.metrics import f1_score
from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)

# Make predictions on the test set
y_pred = lr_model.predict(x_test)

# Calculate the F1 score
f1 = f1_score(y_test, y_pred)
print(f"Logistic Regression F1 Score: {f1}")

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

# Random Forest
rf_model = RandomForestClassifier(random_state=40)
rf_model.fit(x_train, y_train)
rf_pred = rf_model.predict(x_test)
rf_f1 = f1_score(y_test, rf_pred)
print(f"Random Forest F1 Score: {rf_f1}")

# Decision Tree
dt_model = DecisionTreeClassifier(random_state=40)
dt_model.fit(x_train, y_train)
dt_pred = dt_model.predict(x_test)
dt_f1 = f1_score(y_test, dt_pred)
print(f"Decision Tree F1 Score: {dt_f1}")

# KNN
knn_model = KNeighborsClassifier()
knn_model.fit(x_train, y_train)
knn_pred = knn_model.predict(x_test)
knn_f1 = f1_score(y_test, knn_pred)
print(f"KNN F1 Score: {knn_f1}")

# SVM
svm_model = SVC(random_state=40)
svm_model.fit(x_train, y_train)
svm_pred = svm_model.predict(x_test)
svm_f1 = f1_score(y_test, svm_pred)
print(f"SVM F1 Score: {svm_f1}")

!pip install xgboost

import xgboost as xgb

# XGBoost
xgb_model = xgb.XGBClassifier(random_state=40)
xgb_model.fit(x_train, y_train)
xgb_pred = xgb_model.predict(x_test)
xgb_f1 = f1_score(y_test, xgb_pred)
print(f"XGBoost F1 Score: {xgb_f1}")

"""Test DF"""

# Print the first few rows of the test DataFrame.
print(test_df.head())

# Get information about the test DataFrame (data types, non-null values, etc.).
print(test_df.info())

# Generate descriptive statistics of the test DataFrame.
print(test_df.describe())

# Print the shape (number of rows and columns) of the test DataFrame.
print(test_df.shape)

# Check for null values in each column of the test DataFrame.
print("Null values", test_df.isna().sum())

# Check for duplicate rows in the test DataFrame.
print("Duplicate values", test_df.duplicated().sum())

dt_pred_test = dt_model.predict(test_df)
dt_pred_test

"""Upload sample submission file"""

sample_submission = pd.read_csv("/content/sample_submission_M0L0uXE.csv")

sample_submission.head()

sample_submission['is_promoted'] = dt_pred_test
sample_submission.head()

sample_submission.to_csv('sample_submission_edited.csv', index=False)

xgb_pred_test = xgb_model.predict(test_df)
xgb_pred_test

sample_submission['is_promoted'] = xgb_pred_test
sample_submission.head()

sample_submission.to_csv('sample_submission_XGB.csv', index=False)